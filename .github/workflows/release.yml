name: release

on:
  push:
    tags: ['v*']   # tag like v0.1, v0.2 to trigger

jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write         # create GitHub Release
      packages: write         # push to GHCR
    defaults:
      run:
        shell: bash

    env:
      IMAGE: ghcr.io/${{ github.repository }}
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE (lowercase)
        id: image
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"     # lower-case owner
          REPO_LC="${GITHUB_REPOSITORY#*/}"           # repo (already lower-case)
          echo "IMAGE=ghcr.io/${OWNER_LC}/${REPO_LC}" >> $GITHUB_ENV
          echo "image=${OWNER_LC}/${REPO_LC}" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            APP_VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.IMAGE }}:${{ env.VERSION }}
            ${{ env.IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            APP_VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.IMAGE }}:${{ env.VERSION }}
            ${{ env.IMAGE }}:latest
          # Optional registry cache (speeds up subsequent builds)
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

      - name: Smoke test container
        run: |
          set -euo pipefail
          docker run -d -p 8000:8000 --name svc "${IMAGE}:${VERSION}"
          for i in {1..30}; do
            # fail fast if container died
            if ! docker ps --format '{{.Names}}' | grep -q '^svc$'; then
              echo "Container exited early"
              docker logs svc || true
              exit 1
            fi
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "Healthcheck OK"
              break
            fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:8000/health >/dev/null
          docker logs svc || true
          docker rm -f svc

      # Extract metrics JSON from the image (expects /app/artifacts/metrics_<version>.json)
      - name: Read metrics from image
        id: metrics
        run: |
          set -euo pipefail
          cid="$(docker create "${IMAGE}:${VERSION}")"
          mkdir -p out
          if docker cp "${cid}:/app/artifacts/metrics_${VERSION}.json" out/metrics.json 2>/dev/null; then
            echo "Found metrics file"
          else
            echo "{}" > out/metrics.json
          fi
          docker rm "$cid" >/dev/null

          # Minify JSON to one line and expose as step output
          python - << 'PY'
          import json, pathlib
          p = pathlib.Path('out/metrics.json')
          try:
              obj = json.loads(p.read_text(encoding='utf-8'))
          except Exception:
              obj = {}
          print(f"json={json.dumps(obj, separators=(',',':'))}")
          PY >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}

            Metrics:
            ```
            ${{ steps.metrics.outputs.json }}
            ```
          files: |
            out/metrics.json
