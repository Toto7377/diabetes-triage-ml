name: release

on:
  push:
    tags: ['v*']  # e.g., v0.1, v0.2

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # create GitHub Release
      packages: write   # push to GHCR
    env:
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute IMAGE (lowercase owner/repo)
        id: img
        shell: bash
        run: |
          set -euo pipefail
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          REPO_LC="${GITHUB_REPOSITORY#*/}"
          echo "IMAGE=ghcr.io/${OWNER_LC}/${REPO_LC}" >> "$GITHUB_ENV"
          echo "image=${OWNER_LC}/${REPO_LC}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            APP_VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.IMAGE }}:${{ env.VERSION }}
            ${{ env.IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

      - name: Smoke test container
        shell: bash
        env:
          IMAGE: ${{ env.IMAGE }}
          VERSION: ${{ env.VERSION }}
        run: |
          set -euo pipefail
          docker run -d --name svc -p 8000:8000 "${IMAGE}:${VERSION}"
          # wait up to ~30s for /health
          for i in {1..30}; do
            if ! docker ps --format '{{.Names}}' | grep -q '^svc$'; then
              echo "Container exited early"
              docker logs svc || true
              exit 1
            fi
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "Healthcheck OK"
              break
            fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:8000/health >/dev/null
          docker logs svc || true
          docker rm -f svc

      - name: Read metrics from image
        id: metrics
        shell: bash
        env:
          IMAGE: ${{ env.IMAGE }}
          VERSION: ${{ env.VERSION }}
        run: |
          set -euo pipefail
          json="$(docker run --rm "${IMAGE}:${VERSION}" cat "/app/artifacts/metrics_${VERSION}.json")"
          mkdir -p out
          printf '%s\n' "$json" > out/metrics.json

          # Expose pretty JSON as a multi-line step output
          {
            echo 'json<<EOF'
            cat out/metrics.json
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          body: |
            Release **${{ env.VERSION }}**

            **Image**
            - `ghcr.io/${{ steps.img.outputs.image }}:${{ env.VERSION }}`
            - `ghcr.io/${{ steps.img.outputs.image }}:latest`

            **Metrics**
            ```
            ${{ steps.metrics.outputs.json }}
            ```
          files: |
            out/metrics.json
